basePath: /api/v2
definitions:
  auth.AuthProviderInfo:
    properties:
      icon:
        type: string
      label:
        type: string
      name:
        type: string
      path:
        type: string
    required:
    - icon
    - label
    - name
    type: object
  common.ApiVersionData:
    properties:
      app:
        type: string
      commit_hash:
        type: string
      version:
        type: string
    required:
    - app
    - commit_hash
    - version
    type: object
  common.ConfData:
    properties:
      frontend_conf:
        $ref: '#/definitions/common.Map'
      version:
        $ref: '#/definitions/common.ApiVersionData'
    required:
    - frontend_conf
    - version
    type: object
  common.JSONResult:
    properties:
      data:
        description: Data
      msg:
        description: Message
        type: string
    required:
    - data
    - msg
    type: object
  common.Map:
    additionalProperties: true
    type: object
  entity.CookedComment:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      content:
        type: string
      content_marked:
        type: string
      date:
        type: string
      email_encrypted:
        type: string
      id:
        type: integer
      ip_region:
        type: string
      is_allow_reply:
        type: boolean
      is_collapsed:
        type: boolean
      is_pending:
        type: boolean
      is_pinned:
        type: boolean
      is_verified:
        type: boolean
      link:
        type: string
      nick:
        type: string
      page_key:
        type: string
      page_url:
        type: string
      rid:
        type: integer
      site_name:
        type: string
      ua:
        type: string
      user_id:
        type: integer
      visible:
        type: boolean
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - badge_color
    - badge_name
    - content
    - content_marked
    - date
    - email_encrypted
    - id
    - ip_region
    - is_allow_reply
    - is_collapsed
    - is_pending
    - is_pinned
    - is_verified
    - link
    - nick
    - page_key
    - page_url
    - rid
    - site_name
    - ua
    - user_id
    - visible
    - vote_down
    - vote_up
    type: object
  entity.CookedNotify:
    properties:
      comment_id:
        type: integer
      id:
        type: integer
      is_emailed:
        type: boolean
      is_read:
        type: boolean
      read_link:
        type: string
      user_id:
        type: integer
    required:
    - comment_id
    - id
    - is_emailed
    - is_read
    - read_link
    - user_id
    type: object
  entity.CookedPage:
    properties:
      admin_only:
        type: boolean
      date:
        type: string
      id:
        type: integer
      key:
        type: string
      pv:
        type: integer
      site_name:
        type: string
      title:
        type: string
      url:
        type: string
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - admin_only
    - date
    - id
    - key
    - pv
    - site_name
    - title
    - url
    - vote_down
    - vote_up
    type: object
  entity.CookedSite:
    properties:
      first_url:
        type: string
      id:
        type: integer
      name:
        type: string
      urls:
        items:
          type: string
        type: array
      urls_raw:
        type: string
    required:
    - first_url
    - id
    - name
    - urls
    - urls_raw
    type: object
  entity.CookedUser:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      link:
        type: string
      name:
        type: string
      receive_email:
        type: boolean
    required:
    - badge_color
    - badge_name
    - email
    - id
    - is_admin
    - link
    - name
    - receive_email
    type: object
  entity.CookedUserForAdmin:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      comment_count:
        type: integer
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      is_in_conf:
        type: boolean
      last_ip:
        type: string
      last_ua:
        type: string
      link:
        type: string
      name:
        type: string
      receive_email:
        type: boolean
    required:
    - badge_color
    - badge_name
    - comment_count
    - email
    - id
    - is_admin
    - is_in_conf
    - last_ip
    - last_ua
    - link
    - name
    - receive_email
    type: object
  handler.Map:
    additionalProperties: true
    type: object
  handler.ParamsCaptchaVerify:
    properties:
      value:
        description: The captcha value to check
        type: string
    required:
    - value
    type: object
  handler.ParamsCommentCreate:
    properties:
      content:
        description: The comment content
        type: string
      email:
        description: The comment email
        type: string
      link:
        description: The comment link
        type: string
      name:
        description: The comment name
        type: string
      page_key:
        description: The comment page_key
        type: string
      page_title:
        description: The comment page_title
        type: string
      rid:
        description: The comment rid
        type: integer
      site_name:
        description: The site name of your content scope
        type: string
      ua:
        description: The comment ua
        type: string
    required:
    - content
    - email
    - name
    - page_key
    - site_name
    type: object
  handler.ParamsCommentUpdate:
    properties:
      content:
        description: The comment content
        type: string
      email:
        description: The comment email
        type: string
      ip:
        description: The comment ip
        type: string
      is_collapsed:
        description: The comment is_collapsed
        type: boolean
      is_pending:
        description: The comment is_pending
        type: boolean
      is_pinned:
        description: The comment is_pinned
        type: boolean
      link:
        description: The comment link
        type: string
      nick:
        description: The comment nick
        type: string
      page_key:
        description: The comment page_key
        type: string
      rid:
        description: The comment rid
        type: integer
      site_name:
        description: The site name of your content scope
        type: string
      ua:
        description: The comment ua
        type: string
    required:
    - content
    - is_collapsed
    - is_pending
    - is_pinned
    - page_key
    - rid
    - site_name
    type: object
  handler.ParamsEmailSend:
    properties:
      body:
        description: The body of email
        type: string
      subject:
        description: The subject of email
        type: string
      to_addr:
        description: The email address of the receiver
        type: string
    required:
    - body
    - subject
    - to_addr
    type: object
  handler.ParamsNotifyReadAll:
    properties:
      email:
        description: The user email
        type: string
      name:
        description: The username
        type: string
    required:
    - email
    - name
    type: object
  handler.ParamsPageFetchAll:
    properties:
      site_name:
        description: If not empty, only fetch pages of this site
        type: string
    type: object
  handler.ParamsPagePV:
    properties:
      page_key:
        description: The page key
        type: string
      page_title:
        description: The page title
        type: string
      site_name:
        description: The site name of your content scope
        type: string
    required:
    - page_key
    type: object
  handler.ParamsPageUpdate:
    properties:
      admin_only:
        description: Updated page admin_only option
        type: boolean
      key:
        description: Updated page key
        type: string
      site_name:
        description: The site name of your content scope
        type: string
      title:
        description: Updated page title
        type: string
    required:
    - admin_only
    - key
    - site_name
    - title
    type: object
  handler.ParamsSettingApply:
    properties:
      yaml:
        description: The content of the config file in YAML format
        type: string
    required:
    - yaml
    type: object
  handler.ParamsSiteCreate:
    properties:
      name:
        description: The site name
        type: string
      urls:
        description: The site urls
        items:
          type: string
        type: array
    required:
    - name
    - urls
    type: object
  handler.ParamsSiteUpdate:
    properties:
      name:
        description: Updated site name
        type: string
      urls:
        description: Updated site urls
        items:
          type: string
        type: array
    required:
    - name
    - urls
    type: object
  handler.ParamsTransferImport:
    properties:
      assumeyes:
        description: Automatically answer yes for all questions
        type: boolean
      json_data:
        description: The JSON data
        type: string
      json_file:
        description: The JSON file path
        type: string
      target_site_name:
        description: The target site name
        type: string
      target_site_url:
        description: The target site url
        type: string
      url_keep_domain:
        description: Keep domain
        type: boolean
      url_resolver:
        description: Enable URL resolver
        type: boolean
    type: object
  handler.ParamsUserCreate:
    properties:
      badge_color:
        description: The user badge color (hex format)
        type: string
      badge_name:
        description: The user badge name
        type: string
      email:
        description: The user email
        type: string
      is_admin:
        description: The user is an admin
        type: boolean
      link:
        description: The user link
        type: string
      name:
        description: The user name
        type: string
      password:
        description: The user password
        type: string
      receive_email:
        description: The user receive email
        type: boolean
    required:
    - email
    - is_admin
    - name
    - receive_email
    type: object
  handler.ParamsUserLogin:
    properties:
      email:
        description: The user email
        type: string
      name:
        description: The username
        type: string
      password:
        description: The user password
        type: string
    required:
    - email
    - password
    type: object
  handler.ParamsUserUpdate:
    properties:
      badge_color:
        description: The user badge color (hex format)
        type: string
      badge_name:
        description: The user badge name
        type: string
      email:
        description: The user email
        type: string
      is_admin:
        description: The user is an admin
        type: boolean
      link:
        description: The user link
        type: string
      name:
        description: The user name
        type: string
      password:
        description: The user password
        type: string
      receive_email:
        description: The user receive email
        type: boolean
    required:
    - email
    - is_admin
    - name
    - receive_email
    type: object
  handler.ParamsVote:
    properties:
      email:
        description: The user email
        type: string
      name:
        description: The username
        type: string
    type: object
  handler.RequestAuthDataMergeApply:
    properties:
      user_name:
        type: string
    required:
    - user_name
    type: object
  handler.RequestAuthEmailLogin:
    properties:
      code:
        type: string
      email:
        type: string
      password:
        type: string
    required:
    - email
    type: object
  handler.RequestAuthEmailRegister:
    properties:
      code:
        type: string
      email:
        type: string
      link:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - code
    - email
    - password
    type: object
  handler.RequestAuthEmailSend:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  handler.ResponseAdminUserList:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/entity.CookedUserForAdmin'
        type: array
    required:
    - count
    - users
    type: object
  handler.ResponseAuthDataMergeApply:
    properties:
      deleted_user_count:
        type: integer
      update_comments_count:
        type: integer
      update_notifies_count:
        type: integer
      update_votes_count:
        type: integer
      user_token:
        description: Empty if login user is target user no need to re-login
        type: string
    required:
    - deleted_user_count
    - update_comments_count
    - update_notifies_count
    - update_votes_count
    - user_token
    type: object
  handler.ResponseAuthDataMergeCheck:
    properties:
      need_merge:
        type: boolean
      user_names:
        items:
          type: string
        type: array
    required:
    - need_merge
    - user_names
    type: object
  handler.ResponseCaptchaGet:
    properties:
      img_data:
        type: string
    required:
    - img_data
    type: object
  handler.ResponseCaptchaStatus:
    properties:
      is_pass:
        type: boolean
    required:
    - is_pass
    type: object
  handler.ResponseCommentCreate:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      content:
        type: string
      content_marked:
        type: string
      date:
        type: string
      email_encrypted:
        type: string
      id:
        type: integer
      ip_region:
        type: string
      is_allow_reply:
        type: boolean
      is_collapsed:
        type: boolean
      is_pending:
        type: boolean
      is_pinned:
        type: boolean
      is_verified:
        type: boolean
      link:
        type: string
      nick:
        type: string
      page_key:
        type: string
      page_url:
        type: string
      rid:
        type: integer
      site_name:
        type: string
      ua:
        type: string
      user_id:
        type: integer
      visible:
        type: boolean
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - badge_color
    - badge_name
    - content
    - content_marked
    - date
    - email_encrypted
    - id
    - ip_region
    - is_allow_reply
    - is_collapsed
    - is_pending
    - is_pinned
    - is_verified
    - link
    - nick
    - page_key
    - page_url
    - rid
    - site_name
    - ua
    - user_id
    - visible
    - vote_down
    - vote_up
    type: object
  handler.ResponseCommentGet:
    properties:
      comment:
        allOf:
        - $ref: '#/definitions/entity.CookedComment'
        description: The comment detail
      reply_comment:
        allOf:
        - $ref: '#/definitions/entity.CookedComment'
        description: The reply comment if exists (like reply)
    required:
    - comment
    - reply_comment
    type: object
  handler.ResponseCommentList:
    properties:
      comments:
        items:
          $ref: '#/definitions/entity.CookedComment'
        type: array
      count:
        type: integer
      page:
        $ref: '#/definitions/entity.CookedPage'
      roots_count:
        type: integer
    required:
    - comments
    - count
    - page
    - roots_count
    type: object
  handler.ResponseCommentUpdate:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      content:
        type: string
      content_marked:
        type: string
      date:
        type: string
      email_encrypted:
        type: string
      id:
        type: integer
      ip_region:
        type: string
      is_allow_reply:
        type: boolean
      is_collapsed:
        type: boolean
      is_pending:
        type: boolean
      is_pinned:
        type: boolean
      is_verified:
        type: boolean
      link:
        type: string
      nick:
        type: string
      page_key:
        type: string
      page_url:
        type: string
      rid:
        type: integer
      site_name:
        type: string
      ua:
        type: string
      user_id:
        type: integer
      visible:
        type: boolean
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - badge_color
    - badge_name
    - content
    - content_marked
    - date
    - email_encrypted
    - id
    - ip_region
    - is_allow_reply
    - is_collapsed
    - is_pending
    - is_pinned
    - is_verified
    - link
    - nick
    - page_key
    - page_url
    - rid
    - site_name
    - ua
    - user_id
    - visible
    - vote_down
    - vote_up
    type: object
  handler.ResponseConfAuthProviders:
    properties:
      anonymous:
        type: boolean
      providers:
        items:
          $ref: '#/definitions/auth.AuthProviderInfo'
        type: array
    required:
    - anonymous
    - providers
    type: object
  handler.ResponseConfDomain:
    properties:
      is_trusted:
        description: Is the domain trusted
        type: boolean
      origin:
        description: The origin of the domain
        type: string
    required:
    - is_trusted
    - origin
    type: object
  handler.ResponseNotifyList:
    properties:
      count:
        type: integer
      notifies:
        items:
          $ref: '#/definitions/entity.CookedNotify'
        type: array
    required:
    - count
    - notifies
    type: object
  handler.ResponsePageFetch:
    properties:
      admin_only:
        type: boolean
      date:
        type: string
      id:
        type: integer
      key:
        type: string
      pv:
        type: integer
      site_name:
        type: string
      title:
        type: string
      url:
        type: string
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - admin_only
    - date
    - id
    - key
    - pv
    - site_name
    - title
    - url
    - vote_down
    - vote_up
    type: object
  handler.ResponsePageFetchStatus:
    properties:
      done:
        description: The number of pages that have been fetched
        type: integer
      is_progress:
        description: If the task is in progress
        type: boolean
      msg:
        description: The message of the task status
        type: string
      total:
        description: The total number of pages
        type: integer
    required:
    - done
    - is_progress
    - msg
    - total
    type: object
  handler.ResponsePageList:
    properties:
      count:
        type: integer
      pages:
        items:
          $ref: '#/definitions/entity.CookedPage'
        type: array
    required:
    - count
    - pages
    type: object
  handler.ResponsePagePV:
    properties:
      pv:
        type: integer
    required:
    - pv
    type: object
  handler.ResponsePageUpdate:
    properties:
      admin_only:
        type: boolean
      date:
        type: string
      id:
        type: integer
      key:
        type: string
      pv:
        type: integer
      site_name:
        type: string
      title:
        type: string
      url:
        type: string
      vote_down:
        type: integer
      vote_up:
        type: integer
    required:
    - admin_only
    - date
    - id
    - key
    - pv
    - site_name
    - title
    - url
    - vote_down
    - vote_up
    type: object
  handler.ResponseSettingGet:
    properties:
      yaml:
        type: string
    required:
    - yaml
    type: object
  handler.ResponseSettingTemplate:
    properties:
      yaml:
        type: string
    required:
    - yaml
    type: object
  handler.ResponseSiteCreate:
    properties:
      first_url:
        type: string
      id:
        type: integer
      name:
        type: string
      urls:
        items:
          type: string
        type: array
      urls_raw:
        type: string
    required:
    - first_url
    - id
    - name
    - urls
    - urls_raw
    type: object
  handler.ResponseSiteList:
    properties:
      count:
        type: integer
      sites:
        items:
          $ref: '#/definitions/entity.CookedSite'
        type: array
    required:
    - count
    - sites
    type: object
  handler.ResponseSiteUpdate:
    properties:
      first_url:
        type: string
      id:
        type: integer
      name:
        type: string
      urls:
        items:
          type: string
        type: array
      urls_raw:
        type: string
    required:
    - first_url
    - id
    - name
    - urls
    - urls_raw
    type: object
  handler.ResponseTransferExport:
    properties:
      artrans:
        description: The exported data which is a JSON string
        type: string
    required:
    - artrans
    type: object
  handler.ResponseTransferUpload:
    properties:
      filename:
        description: The uploaded file name which can be used to import
        type: string
    required:
    - filename
    type: object
  handler.ResponseUpload:
    properties:
      file_name:
        type: string
      file_type:
        type: string
      public_url:
        type: string
    required:
    - file_name
    - file_type
    - public_url
    type: object
  handler.ResponseUserCreate:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      comment_count:
        type: integer
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      is_in_conf:
        type: boolean
      last_ip:
        type: string
      last_ua:
        type: string
      link:
        type: string
      name:
        type: string
      receive_email:
        type: boolean
    required:
    - badge_color
    - badge_name
    - comment_count
    - email
    - id
    - is_admin
    - is_in_conf
    - last_ip
    - last_ua
    - link
    - name
    - receive_email
    type: object
  handler.ResponseUserInfo:
    properties:
      is_login:
        type: boolean
      notifies:
        items:
          $ref: '#/definitions/entity.CookedNotify'
        type: array
      notifies_count:
        type: integer
      user:
        $ref: '#/definitions/entity.CookedUser'
    required:
    - is_login
    - notifies
    - notifies_count
    - user
    type: object
  handler.ResponseUserLogin:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/entity.CookedUser'
    required:
    - token
    - user
    type: object
  handler.ResponseUserStatus:
    properties:
      is_admin:
        type: boolean
      is_login:
        type: boolean
    required:
    - is_admin
    - is_login
    type: object
  handler.ResponseUserUpdate:
    properties:
      badge_color:
        type: string
      badge_name:
        type: string
      comment_count:
        type: integer
      email:
        type: string
      id:
        type: integer
      is_admin:
        type: boolean
      is_in_conf:
        type: boolean
      last_ip:
        type: string
      last_ua:
        type: string
      link:
        type: string
      name:
        type: string
      receive_email:
        type: boolean
    required:
    - badge_color
    - badge_name
    - comment_count
    - email
    - id
    - is_admin
    - is_in_conf
    - last_ip
    - last_ua
    - link
    - name
    - receive_email
    type: object
  handler.ResponseVote:
    properties:
      down:
        type: integer
      up:
        type: integer
    required:
    - down
    - up
    type: object
info:
  contact:
    email: artalkjs@gmail.com
    name: API Support
    url: https://artalk.js.org
  description: Artalk is a modern comment system based on Golang.
  license:
    name: MIT
    url: https://github.com/ArtalkJS/Artalk/blob/master/LICENSE
  title: Artalk API
  version: "2.0"
paths:
  /auth/email/login:
    post:
      consumes:
      - application/json
      description: Login by email with verify code (Need send email verify code first)
        or password
      operationId: LoginByEmail
      parameters:
      - description: The data to login
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RequestAuthEmailLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserLogin'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Login by email
      tags:
      - Auth
  /auth/email/register:
    post:
      consumes:
      - application/json
      description: Register by email and verify code (if user exists, will update
        user, like forget password. Need send email verify code first)
      operationId: RegisterByEmail
      parameters:
      - description: The data to register
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RequestAuthEmailRegister'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserLogin'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Register by email
      tags:
      - Auth
  /auth/email/send:
    post:
      consumes:
      - application/json
      description: Send email including verify code to user
      operationId: SendVerifyEmail
      parameters:
      - description: The data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RequestAuthEmailSend'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Send verify email
      tags:
      - Auth
  /auth/merge:
    get:
      description: Get all users with same email, if there are more than one user
        with same email, need merge
      operationId: CheckDataMerge
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseAuthDataMergeCheck'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Check data merge
      tags:
      - Auth
    post:
      consumes:
      - application/json
      description: This function is to solve the problem of multiple users with the
        same email address, should be called after user login and then check, and
        perform data merge.
      operationId: ApplyDataMerge
      parameters:
      - description: The data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.RequestAuthDataMergeApply'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseAuthDataMergeApply'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Apply data merge
      tags:
      - Auth
  /cache/flush:
    post:
      description: Flush all cache on the server
      operationId: FlushCache
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Flush Cache
      tags:
      - Cache
  /cache/warm_up:
    post:
      description: Cache warming helps you to pre-load the cache to improve the performance
        of the first request
      operationId: WarmUpCache
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Warm-Up Cache
      tags:
      - Cache
  /captcha:
    get:
      description: Get a base64 encoded captcha image or a HTML page to verify for
        user
      operationId: GetCaptcha
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCaptchaGet'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Get Captcha
      tags:
      - Captcha
  /captcha/status:
    get:
      description: Get the status of the user's captcha verification
      operationId: GetCaptchaStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCaptchaStatus'
      summary: Get Captcha Status
      tags:
      - Captcha
  /captcha/verify:
    post:
      description: Verify user enters correct captcha code
      operationId: VerifyCaptcha
      parameters:
      - description: The data to check
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsCaptchaVerify'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                img_data:
                  type: string
              type: object
      summary: Verify Captcha
      tags:
      - Captcha
  /comments:
    get:
      consumes:
      - application/json
      description: Get a list of comments by some conditions
      operationId: GetComments
      parameters:
      - description: The user email
        in: query
        name: email
        type: string
      - description: Enable flat_mode
        in: query
        name: flat_mode
        type: boolean
      - description: The limit for pagination
        in: query
        name: limit
        type: integer
      - description: The username
        in: query
        name: name
        type: string
      - description: The offset for pagination
        in: query
        name: offset
        type: integer
      - description: The comment page_key
        in: query
        name: page_key
        required: true
        type: string
      - description: The scope of comments
        enum:
        - page
        - user
        - site
        in: query
        name: scope
        type: string
      - description: Search keywords
        in: query
        name: search
        type: string
      - description: The site name of your content scope
        in: query
        name: site_name
        type: string
      - description: Sort by condition
        enum:
        - date_asc
        - date_desc
        - vote
        in: query
        name: sort_by
        type: string
      - description: Message center show type
        enum:
        - all
        - mentions
        - mine
        - pending
        in: query
        name: type
        type: string
      - description: Only show comments by admin
        in: query
        name: view_only_admin
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCommentList'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Comment List
      tags:
      - Comment
    post:
      consumes:
      - application/json
      description: Create a new comment
      operationId: CreateComment
      parameters:
      - description: The comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsCommentCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCommentCreate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Create Comment
      tags:
      - Comment
  /comments/{id}:
    delete:
      description: Delete a specific comment
      operationId: DeleteComment
      parameters:
      - description: The comment ID you want to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Delete Comment
      tags:
      - Comment
    get:
      consumes:
      - application/json
      description: Get the detail of a comment by comment id
      operationId: GetComment
      parameters:
      - description: The comment ID you want to get
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCommentGet'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Get a comment
      tags:
      - Comment
    put:
      consumes:
      - application/json
      description: Update a specific comment
      operationId: UpdateComment
      parameters:
      - description: The comment ID you want to update
        in: path
        name: id
        required: true
        type: integer
      - description: The comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsCommentUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseCommentUpdate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update Comment
      tags:
      - Comment
  /conf:
    get:
      description: Get System Configs for UI
      operationId: Conf
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ConfData'
      summary: Get System Configs
      tags:
      - System
  /conf/auth/providers:
    get:
      description: Get social login providers
      operationId: GetSocialLoginProviders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseConfAuthProviders'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Get Social Login Providers
      tags:
      - System
  /conf/domain:
    get:
      description: Get Domain Info
      operationId: GetDomain
      parameters:
      - description: Domain URL
        in: query
        name: url
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseConfDomain'
      summary: Get Domain Info
      tags:
      - System
  /notifies:
    get:
      consumes:
      - application/json
      description: Get a list of notifies for user
      operationId: GetNotifies
      parameters:
      - description: The user name
        in: query
        name: name
        required: true
        type: string
      - description: The user email
        in: query
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseNotifyList'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Get Notifies
      tags:
      - Notify
  /notifies/{comment_id}/{notify_key}:
    post:
      description: Mark specific notification as read for user
      operationId: MarkNotifyRead
      parameters:
      - description: The comment id of the notify you want to mark as read
        in: path
        name: comment_id
        required: true
        type: integer
      - description: The key of the notify
        in: path
        name: notify_key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Mark Notify as Read
      tags:
      - Notify
  /notifies/read:
    post:
      consumes:
      - application/json
      description: Mark all notifies as read for user
      operationId: MarkAllNotifyRead
      parameters:
      - description: The options
        in: body
        name: options
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsNotifyReadAll'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Mark All Notifies as Read
      tags:
      - Notify
  /pages:
    get:
      consumes:
      - application/json
      description: Get a list of pages by some conditions
      operationId: GetPages
      parameters:
      - description: The limit for pagination
        in: query
        name: limit
        type: integer
      - description: The offset for pagination
        in: query
        name: offset
        type: integer
      - description: The site name of your content scope
        in: query
        name: site_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponsePageList'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Page List
      tags:
      - Page
  /pages/{id}:
    delete:
      description: Delete a specific page
      operationId: DeletePage
      parameters:
      - description: The page ID you want to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Delete Page
      tags:
      - Page
    put:
      consumes:
      - application/json
      description: Update a specific page
      operationId: UpdatePage
      parameters:
      - description: The page ID you want to update
        in: path
        name: id
        required: true
        type: integer
      - description: The page data
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsPageUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponsePageUpdate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update Page
      tags:
      - Page
  /pages/{id}/fetch:
    post:
      consumes:
      - application/json
      description: Fetch the data of a specific page
      operationId: FetchPage
      parameters:
      - description: The page ID you want to fetch
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponsePageFetch'
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Fetch Page Data
      tags:
      - Page
  /pages/fetch:
    post:
      consumes:
      - application/json
      description: Fetch the data of all pages
      operationId: FetchAllPages
      parameters:
      - description: The options
        in: body
        name: options
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsPageFetchAll'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Fetch All Pages Data
      tags:
      - Page
  /pages/fetch/status:
    get:
      description: Get the status of the task of fetching all pages
      operationId: GetPageFetchStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponsePageFetchStatus'
      security:
      - ApiKeyAuth: []
      summary: Get Pages Fetch Status
      tags:
      - Page
  /pages/pv:
    post:
      consumes:
      - application/json
      description: Increase and get the number of page views
      operationId: LogPv
      parameters:
      - description: The page to record pv
        in: body
        name: page
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsPagePV'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponsePagePV'
      summary: Increase Page Views (PV)
      tags:
      - Page
  /send_email:
    post:
      consumes:
      - application/json
      description: Send an email to test the email sender
      operationId: SendEmail
      parameters:
      - description: The email data
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsEmailSend'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.Map'
      security:
      - ApiKeyAuth: []
      summary: Send Email
      tags:
      - System
  /settings:
    get:
      description: Get settings from app config file
      operationId: GetSettings
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseSettingGet'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get Settings
      tags:
      - System
    put:
      consumes:
      - application/json
      description: Apply settings and restart the server
      operationId: ApplySettings
      parameters:
      - description: The settings
        in: body
        name: settings
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsSettingApply'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Save and apply Settings
      tags:
      - System
  /settings/template/{locale}:
    get:
      description: Get config templates in different languages for rendering the settings
        page in the frontend
      operationId: GetSettingsTemplate
      parameters:
      - description: The locale of the settings template you want to get
        in: path
        name: locale
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseSettingTemplate'
      security:
      - ApiKeyAuth: []
      summary: Get Settings Template
      tags:
      - System
  /sites:
    get:
      description: Get a list of sites by some conditions
      operationId: GetSites
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseSiteList'
      security:
      - ApiKeyAuth: []
      summary: Get Site List
      tags:
      - Site
    post:
      consumes:
      - application/json
      description: Create a new site
      operationId: CreateSite
      parameters:
      - description: The site data
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsSiteCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseSiteCreate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Create Site
      tags:
      - Site
  /sites/{id}:
    delete:
      description: Delete a specific site
      operationId: deleteSite
      parameters:
      - description: The site ID you want to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Site Delete
      tags:
      - Site
    put:
      consumes:
      - application/json
      description: Update a specific site
      operationId: UpdateSite
      parameters:
      - description: The site ID you want to update
        in: path
        name: id
        required: true
        type: integer
      - description: The site data
        in: body
        name: site
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsSiteUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseSiteUpdate'
      security:
      - ApiKeyAuth: []
      summary: Update Site
      tags:
      - Site
  /stats/{type}:
    get:
      consumes:
      - application/json
      description: Get the statistics of various data analysis
      operationId: GetStats
      parameters:
      - description: The type of statistics
        enum:
        - latest_comments
        - latest_pages
        - pv_most_pages
        - comment_most_pages
        - page_pv
        - site_pv
        - page_comment
        - site_comment
        - rand_comments
        - rand_pages
        in: path
        name: type
        required: true
        type: string
      - description: The limit for pagination
        in: query
        name: limit
        type: integer
      - description: multiple page keys separated by commas
        in: query
        name: page_keys
        type: string
      - description: The site name of your content scope
        in: query
        name: site_name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.JSONResult'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Statistic
      tags:
      - Statistic
  /transfer/export:
    get:
      description: Export data from Artalk
      operationId: ExportArtrans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseTransferExport'
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Export Artrans
      tags:
      - Transfer
  /transfer/import:
    post:
      consumes:
      - application/json
      description: Import data to Artalk
      operationId: ImportArtrans
      parameters:
      - description: The data to import
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsTransferImport'
      produces:
      - text/html
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Import Artrans
      tags:
      - Transfer
  /transfer/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload a file to prepare to import
      operationId: UploadArtrans
      parameters:
      - description: Upload file in preparation for import task
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/handler.ResponseTransferUpload'
            - properties:
                filename:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Upload Artrans
      tags:
      - Transfer
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload file from this endpoint
      operationId: Upload
      parameters:
      - description: Upload file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUpload'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Upload
      tags:
      - Upload
  /user:
    get:
      description: Get user info to prepare for login or check current user status
      operationId: GetUser
      parameters:
      - description: The user email
        in: query
        name: email
        type: string
      - description: The username
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserInfo'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get User Info
      tags:
      - Auth
  /user/access_token:
    post:
      consumes:
      - application/json
      description: Login user by name or email
      operationId: Login
      parameters:
      - description: The user login data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsUserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserLogin'
        "400":
          description: Multiple users with the same email address are matched
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                data:
                  properties:
                    need_name_select:
                      items:
                        type: string
                      type: array
                  type: object
                msg:
                  type: string
              type: object
        "401":
          description: Unauthorized
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Get Access Token
      tags:
      - Auth
  /user/status:
    get:
      description: Get user login status by header Authorization
      operationId: GetUserStatus
      parameters:
      - description: The user email
        in: query
        name: email
        type: string
      - description: The username
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserStatus'
      security:
      - ApiKeyAuth: []
      summary: Get Login Status
      tags:
      - Auth
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user
      operationId: CreateUser
      parameters:
      - description: The user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsUserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserCreate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Create User
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete a specific user
      operationId: DeleteUser
      parameters:
      - description: The user ID you want to delete
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Delete User
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update a specific user
      operationId: UpdateUser
      parameters:
      - description: The user ID you want to update
        in: path
        name: id
        required: true
        type: integer
      - description: The user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsUserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseUserUpdate'
        "400":
          description: Bad Request
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Update User
      tags:
      - User
  /users/{type}:
    get:
      consumes:
      - application/json
      description: Get a list of users by some conditions
      operationId: GetUsers
      parameters:
      - description: The type of users
        enum:
        - all
        - admin
        - in_conf
        in: path
        name: type
        type: string
      - description: The limit for pagination
        in: query
        name: limit
        type: integer
      - description: The offset for pagination
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseAdminUserList'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Get User List
      tags:
      - User
  /version:
    get:
      description: Get the version of Artalk
      operationId: GetVersion
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/common.ApiVersionData'
      summary: Get Version Info
      tags:
      - System
  /votes/{type}/{target_id}:
    post:
      consumes:
      - application/json
      description: Vote for a specific comment or page
      operationId: Vote
      parameters:
      - description: The type of vote target
        enum:
        - comment_up
        - comment_down
        - page_up
        - page_down
        in: path
        name: type
        required: true
        type: string
      - description: Target comment or page ID you want to vote for
        in: path
        name: target_id
        required: true
        type: integer
      - description: The vote data
        in: body
        name: vote
        required: true
        schema:
          $ref: '#/definitions/handler.ParamsVote'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.ResponseVote'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "404":
          description: Not Found
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      summary: Vote
      tags:
      - Vote
  /votes/sync:
    post:
      description: Sync the number of votes in the `comments` or `pages` data tables
        to keep them the same as the `votes` table
      operationId: SyncVotes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handler.Map'
        "403":
          description: Forbidden
          schema:
            allOf:
            - $ref: '#/definitions/handler.Map'
            - properties:
                msg:
                  type: string
              type: object
      security:
      - ApiKeyAuth: []
      summary: Sync Vote Data
      tags:
      - Vote
securityDefinitions:
  ApiKeyAuth:
    description: '"Type ''Bearer TOKEN'' to correctly set the API Key"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
